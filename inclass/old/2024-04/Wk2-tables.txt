Notes October 9 

t1:
col1    col2
A       5
B       3
C       1
D       5

t2:
col3    col4
A       foo
A       bar
C       baz
E       foo

CREATE TABLE t1(
col1 varchar(10),
col2 int );
CREATE TABLE t2(
col3 varchar(10),
col4 varchar(10));

INSERT INTO t1 VALUES ("A", 5);
INSERT INTO t1 VALUES ("B", 3);
INSERT INTO t1 VALUES ("C", 1);
INSERT INTO t1 VALUES  ("D", 5);

INSERT INTO t2  VALUES ("A", "foo");
INSERT INTO t2  VALUES ("A", "bar");
INSERT INTO t2  VALUES ("C", "baz");
INSERT INTO t2  VALUES ("E", "foo");

SELECT COUNT(*) from t1 JOIN t2;

SELECT COUNT(*) from t1 JOIN t2 on col1=col3;

SELECT * FROM t1 JOIN t2 on col1=col3;    -- inner join is commmutative because equality is commutative.

SELECT * FROM t2 JOIN t1 on col1=col3;    -- column order is different, but column order doesn't matter.:

SELECT * FROM t1 FULL OUTER JOIN t2 on t1.col1=t2.col3; 

SELECT count(*) FROM t1 LEFT JOIN t2 on t1.col1=t2.col3; 

SELECT * FROM t1 FULL OUTER JOIN t2 on t1.col1=t2.col3 WHERE col1 IS NULL;   -- this is the right disjoint set
SELECT * FROM t1 FULL OUTER JOIN t2 on t1.col1=t2.col3 WHERE col3 IS NULL;   -- and the left disjoint set

Requirement for HW1 is a git history that has commits from at least two people.  Github-classroom-robot 
does not count.

git clone <URL>
git checkout -b hw_0  # create or check out hw_0 branch
git add myfile
git commit -m "Added myfile!"

git push    # share committed changes in local branch  with github (origin)

git remote add partner <URL>  # add nickname "partner" for Darth Vader's github fork
git checkout -b partner
git pull partner    #  Which branch did you want?
git pull partner hw_0 
# Now you have a branch called "partner" that is up-to-date with partner/hw_0.
git checkout hw_0
# This is now your work, hw_0 branch...
git merge parter   #  take history, contents of partner branch, fold them into current (hw_0) branch, and mint a new commit.

# Promise:  you will not be expected to produce command-line commands without access
# to the documentation.   Realistically, you will be given commands and asked to predict
# their output or given multiple commands and asked which one works correctly.




